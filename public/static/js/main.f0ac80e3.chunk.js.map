{"version":3,"sources":["react-libs/button/Button.jsx","react-libs/text-input/TextInput.jsx","react-libs/number-input/NumberInputComponent.jsx","react-libs/text-area/TextAreaComponent.jsx","services/rsocket/constants.js","services/rsocket/rsocket.js","services/rsocket/utils.js","components/RsocketWrapper/hooks/useRSocketContext.js","components/RsocketWrapper/RSocketContext.jsx","pages/main/components/Header.jsx","components/RsocketWrapper/hooks/useRSocket.js","pages/main/components/LogArea.jsx","pages/main/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["ButtonComponent","props","name","size","color","handleClick","disabled","isDisabled","colorScheme","onClick","TextInput","label","handleChange","labelProps","styleProps","useState","value","setValue","onChange","useCallback","event","target","align","width","fontSize","focusBorderColor","borderColor","backgroundColor","type","NumberInputComponent","defaultValue","string","number","TextAreaComponent","PropTypes","bool","shape","readonly","isReadOnly","DESTINATION","ENDPOINT","CONN_HOST_PORT","window","location","hostname","port","createConnectionClient","url","protocol","includes","RSocketClient","serializers","data","JsonSerializer","metadata","IdentitySerializer","setup","keepAlive","lifetime","dataMimeType","metadataMimeType","transport","RSocketWebSocketClient","constructCommonParams","method","path","params","queryParams","GET","POST","PUT","DELETE","constructRSocketData","useRSocketContext","isRunOnMount","innerOptions","useMemo","socket","close","isConnected","setIsConnected","onCompleteConnect","onSubscribeConnect","cancel","cancelConnection","onErrorConnect","error","console","onConnectRSocket","callback","client","options","connect","subscribe","onComplete","onError","onSubscribe","connectRSocket","onDisconnectRSocket","useEffect","onRequestResponse","onSuccess","onFailure","onAbort","channel","onSubscribeRequestResponse","onErrorRequestResponse","onCompleteRequestResponse","onNextRequestResponse","metadataTemplate","String","fromCharCode","length","requestResponse","onNext","response","onRequestStream","onFinish","datalength","onSubscribeRequestStream","onErrorRequestStream","onCompleteRequestStream","onNextRequestStream","requestStream","subscription","request","RSocketContext","createContext","RSocketProvider","children","Provider","Header","handleLog","handleLogDisable","channelValue","setChannelValue","setPath","parameters","setParameters","dataLength","setDataLength","useContext","disconnectRSocket","useRSocket","onConnect","onDisconnect","processPayload","JSON","stringify","e","parse","onRequest","methodType","dataType","onStream","justify","borderRadius","p","Check","w","h","Close","LogArea","clear","height","whiteSpace","Main","isLogDisabled","setIsLogDisabled","newValue","clearLog","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0ac80e3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { Button } from '@chakra-ui/react';\r\n\r\nconst propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    disabled: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    color: PropTypes.string,\r\n    handleClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport const ButtonComponent = props => {\r\n    const {\r\n        name, size = 'sm',\r\n        color = 'orange',\r\n        handleClick,\r\n        disabled = false,\r\n    } = props;\r\n    return (\r\n        <Button\r\n            size={size}\r\n            isDisabled={disabled}\r\n            colorScheme={color}\r\n            onClick={handleClick}\r\n        >\r\n            {name}\r\n        </Button>\r\n    );\r\n}\r\n\r\nButtonComponent.propTypes = propTypes;\r\n","import { useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, VStack, Flex } from '@chakra-ui/react';\r\n\r\nconst propTypes = {\r\n    size: PropTypes.string,\r\n    label: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    color: PropTypes.string,\r\n    handleChange: PropTypes.func,\r\n    styleProps: PropTypes.shape({}),\r\n    labelProps: PropTypes.shape({}),\r\n};\r\n\r\nexport const TextInput = props => {\r\n    const {\r\n        disabled = false,\r\n        label,\r\n        size = 'sm',\r\n        color = 'blue',\r\n        handleChange,\r\n        labelProps,\r\n        styleProps,\r\n    } = props;\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    const onChange = useCallback(event => {\r\n        setValue(event.target.value);\r\n        handleChange && handleChange(event.target.value);\r\n    }, [handleChange])\r\n\r\n    return (\r\n        <VStack\r\n            align=\"left\"\r\n            width=\"100%\"\r\n        >\r\n            {\r\n                label && (<Flex fontSize={14} {...labelProps}>{label}</Flex>)\r\n            }\r\n            <Input\r\n                focusBorderColor={`${color}.600`}\r\n                borderColor=\"blue.400\"\r\n                backgroundColor=\"white\"\r\n                type=\"text\"\r\n                isDisabled={disabled}\r\n                size={size}\r\n                value={value}\r\n                onChange={onChange}\r\n                {...styleProps}\r\n            />\r\n        </VStack>\r\n    )\r\n}\r\n\r\nTextInput.propTypes = propTypes;\r\n","import { useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {NumberInput, NumberInputField, VStack, Flex} from '@chakra-ui/react';\r\n\r\nconst propTypes = {\r\n    defaultValue: PropTypes.number,\r\n    size: PropTypes.string,\r\n    label: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    color: PropTypes.string,\r\n    handleChange: PropTypes.func,\r\n    styleProps: PropTypes.shape({}),\r\n    labelProps: PropTypes.shape({}),\r\n}\r\n\r\nexport const NumberInputComponent = props => {\r\n    const {\r\n        defaultValue = 0,\r\n        disabled = false,\r\n        label,\r\n        size = 'sm',\r\n        color = 'blue',\r\n        handleChange,\r\n        labelProps,\r\n        styleProps,\r\n    } = props;\r\n    const [value, setValue] = useState(defaultValue);\r\n    const onChange = useCallback(\r\n        (string, number) => {\r\n            setValue(number);\r\n            handleChange && handleChange(number);\r\n        },\r\n        [handleChange, setValue]\r\n    )\r\n\r\n    return (\r\n        <VStack\r\n            align=\"left\"\r\n            width=\"100%\"\r\n        >\r\n            {\r\n                label && (<Flex fontSize={14} {...labelProps}>{label}</Flex>)\r\n            }\r\n            <NumberInput\r\n                value={value}\r\n                isDisabled={disabled}\r\n                focusBorderColor={`${color}.600`}\r\n                borderColor=\"blue.400\"\r\n                backgroundColor=\"white\"\r\n                size={size}\r\n                onChange={onChange}\r\n                {...styleProps}\r\n            >\r\n                <NumberInputField />\r\n            </NumberInput>\r\n        </VStack>\r\n    )\r\n}\r\n\r\nNumberInputComponent.propTypes = propTypes;\r\n","import PropTypes from 'prop-types';\r\nimport { Textarea } from '@chakra-ui/react';\r\n\r\nconst propTypes = {\r\n    disabled: PropTypes.bool,\r\n    readonly: PropTypes.bool,\r\n    defaultValue: PropTypes.string,\r\n    styleProps: PropTypes.shape({})\r\n}\r\n\r\nexport const TextAreaComponent = props => {\r\n    const {\r\n        defaultValue = '',\r\n        disabled = false,\r\n        readonly = false,\r\n        styleProps,\r\n    } = props;\r\n\r\n    return (\r\n        <Textarea\r\n            backgroundColor=\"white\"\r\n            value={defaultValue}\r\n            isDisabled={disabled}\r\n            isReadOnly={readonly}\r\n            {...styleProps}\r\n        />\r\n    )\r\n}\r\n","export const DESTINATION = 'api-rsocket-v1';\r\nexport const ENDPOINT = '/rsocket';\r\nexport const CONN_HOST_PORT = `${window.location.hostname}:${window.location.port}`;\r\nexport const KEEPALIVE = 60000;\r\nexport const LIFETIME = 180000;\r\n","import { RSocketClient, JsonSerializer, IdentitySerializer } from 'rsocket-core/build';\r\nimport RSocketWebSocketClient from 'rsocket-websocket-client';\r\nimport { DESTINATION, KEEPALIVE, LIFETIME, CONN_HOST_PORT, ENDPOINT } from './constants';\r\n\r\nexport const getWsConnectionUrl = () => window.location.protocol.includes('https')\r\n    ? `wss://${CONN_HOST_PORT}${ENDPOINT}`\r\n    : `ws://${CONN_HOST_PORT}${ENDPOINT}`;\r\n\r\nexport const createConnectionClient = () => {\r\n    const url = getWsConnectionUrl();\r\n\r\n    return new RSocketClient({\r\n        serializers: {\r\n            data: JsonSerializer,\r\n            metadata: IdentitySerializer,\r\n        },\r\n        setup: {\r\n            keepAlive: KEEPALIVE,\r\n            lifetime: LIFETIME,\r\n            dataMimeType: 'application/json',\r\n            metadataMimeType: 'message/x.rsocket.routing.v0',\r\n        },\r\n        transport: new RSocketWebSocketClient({ url })\r\n    })\r\n}\r\n\r\nexport const connectRSocket = options => {\r\n    const { onSubscribeConnect, onCompleteConnect, onErrorConnect } = options;\r\n    const client = createConnectionClient();\r\n\r\n    client.connect()\r\n        .subscribe({\r\n            onComplete: socket => { onCompleteConnect && onCompleteConnect(socket) },\r\n            onError: error => onErrorConnect && onErrorConnect(error),\r\n            onSubscribe: cancel => onSubscribeConnect && onSubscribeConnect(cancel),\r\n        })\r\n\r\n    return client;\r\n}\r\n\r\nexport const requestResponse = (socket, options) => {\r\n    if (!socket || !options) {\r\n        return;\r\n    }\r\n\r\n    const {\r\n        data,\r\n        channel,\r\n        onSubscribeRequestResponse,\r\n        onErrorRequestResponse,\r\n        onCompleteRequestResponse,\r\n        onNextRequestResponse\r\n    } = options;\r\n    const metadataTemplate = `${channel}.${DESTINATION}`;\r\n    const metadata = String.fromCharCode(metadataTemplate.length) + metadataTemplate;\r\n\r\n    socket.requestResponse({ data, metadata })\r\n        .subscribe({\r\n            onSubscribe: cancel => onSubscribeRequestResponse && onSubscribeRequestResponse(cancel),\r\n            onNext: response => onNextRequestResponse && onNextRequestResponse(response && response.data),\r\n            onError: error => onErrorRequestResponse && onErrorRequestResponse(error),\r\n            onComplete: response => onCompleteRequestResponse && onCompleteRequestResponse(response && response.data),\r\n        });\r\n}\r\n\r\nexport const requestStream = (socket, options) => {\r\n    if (!socket || !options) {\r\n        return;\r\n    }\r\n\r\n    const {\r\n        data,\r\n        datalength,\r\n        channel,\r\n        onSubscribeRequestStream,\r\n        onErrorRequestStream,\r\n        onCompleteRequestStream,\r\n        onNextRequestStream,\r\n    } = options;\r\n    const metadataTemplate = `${channel}.${DESTINATION}`;\r\n    const metadata = String.fromCharCode(metadataTemplate.length) + metadataTemplate;\r\n\r\n    socket.requestStream({ data, metadata })\r\n        .subscribe({\r\n            onSubscribe: subscription => {\r\n                onSubscribeRequestStream && onSubscribeRequestStream(subscription);\r\n                subscription.request(datalength || 0xFFFFFF);\r\n            },\r\n            onNext: response => onNextRequestStream && onNextRequestStream(response && response.data),\r\n            onError: error => onErrorRequestStream && onErrorRequestStream(error),\r\n            onComplete: response => onCompleteRequestStream && onCompleteRequestStream(response && response.data),\r\n        });\r\n}\r\n\r\n\r\n\r\n\r\n","\r\nconst constructCommonParams = method => (path, params) => ({\r\n    method,\r\n    path,\r\n    queryParams: {\r\n        ...params\r\n    }\r\n});\r\n\r\nconst GET = constructCommonParams('GET');\r\nconst POST = constructCommonParams('POST');\r\nconst PUT = constructCommonParams('PUT');\r\nconst DELETE = constructCommonParams('DELETE');\r\n\r\nexport const constructRSocketData = (path, params) => ({\r\n    GET: GET(path, params),\r\n    POST: POST(path, params),\r\n    PUT: PUT(path, params),\r\n    DELETE: DELETE(path, params),\r\n})\r\n","import { useCallback, useState, useMemo, useEffect } from 'react';\r\nimport { connectRSocket, requestResponse, requestStream } from '../../../services/rsocket';\r\n\r\nexport const useRSocketContext = (isRunOnMount) => {\r\n    const innerOptions = useMemo(() => ({\r\n        socket: null,\r\n        close: null,\r\n    }), []);\r\n\r\n    const [isConnected, setIsConnected] = useState(false);\r\n\r\n    const onCompleteConnect = useCallback(\r\n        socket => {\r\n            innerOptions && (innerOptions.socket = socket);\r\n            !isConnected && setIsConnected(true);\r\n        },\r\n        [innerOptions, isConnected],\r\n    );\r\n    const onSubscribeConnect = useCallback(\r\n        cancel => innerOptions && (innerOptions.cancelConnection = cancel),\r\n        [innerOptions]\r\n    );\r\n    const onErrorConnect = useCallback(\r\n        error => console.error('connectRSocket error', error),\r\n        []\r\n    );\r\n\r\n    const onConnectRSocket = useCallback(\r\n        callback => {\r\n            if (!isConnected) {\r\n                const client = connectRSocket({\r\n                    onCompleteConnect: socket => {\r\n                        onCompleteConnect(socket);\r\n                        callback && callback();\r\n                    },\r\n                    onSubscribeConnect: onSubscribeConnect,\r\n                    onErrorConnect: onErrorConnect,\r\n                });\r\n                innerOptions.client = client;\r\n                innerOptions.close = () => { client.close() };\r\n\r\n                return client;\r\n            }\r\n        },\r\n        [isConnected]\r\n    )\r\n\r\n    const onDisconnectRSocket = useCallback(\r\n        callback => {\r\n            if (isConnected) {\r\n                const { close } = innerOptions;\r\n                close && close();\r\n                callback && callback();\r\n                setIsConnected(false);\r\n                innerOptions.close = null;\r\n                innerOptions.socket = null;\r\n            }\r\n        },\r\n        [isConnected]\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (isRunOnMount) {\r\n            onConnectRSocket();\r\n        }\r\n\r\n        return () => {\r\n            onDisconnectRSocket();\r\n        }\r\n    }, [\r\n        isRunOnMount,\r\n        isConnected,\r\n        onCompleteConnect,\r\n        onSubscribeConnect,\r\n        onErrorConnect,\r\n    ]);\r\n\r\n    const onRequestResponse = useCallback(\r\n        options => {\r\n            const { onSuccess, onFailure, onAbort, data, channel } = options;\r\n\r\n            if (isConnected) {\r\n                requestResponse(\r\n                    innerOptions.socket, {\r\n                        data,\r\n                        channel,\r\n                        onCompleteRequestResponse: onSuccess,\r\n                        onErrorRequestResponse: onFailure,\r\n                        onSubscribeRequestResponse: onAbort,\r\n                    }\r\n                );\r\n            }\r\n        },\r\n        [isConnected])\r\n\r\n    const onRequestStream = useCallback(\r\n        options => {\r\n            const { onSuccess, onFailure, onSubscribe, onFinish, data, channel, datalength } = options;\r\n\r\n            if (isConnected) {\r\n                requestStream(\r\n                    innerOptions.socket, {\r\n                        data,\r\n                        datalength,\r\n                        channel,\r\n                        onNextRequestStream: onSuccess,\r\n                        onErrorRequestStream: onFailure,\r\n                        onSubscribeRequestStream: onSubscribe,\r\n                        onCompleteRequestStream: onFinish,\r\n                    }\r\n                );\r\n            }\r\n        },\r\n        [isConnected]\r\n    )\r\n\r\n    return useMemo(\r\n        () => (isConnected ? {\r\n            isConnected,\r\n            onConnectRSocket,\r\n            onDisconnectRSocket,\r\n            onRequestResponse,\r\n            onRequestStream\r\n        } : {\r\n            isConnected,\r\n            onConnectRSocket,\r\n            onDisconnectRSocket\r\n        }),\r\n        [\r\n            isConnected,\r\n            onConnectRSocket,\r\n            onDisconnectRSocket,\r\n            onRequestResponse,\r\n            onRequestStream\r\n        ]\r\n    )\r\n}\r\n","import React, { createContext } from 'react';\r\nimport {useRSocketContext} from \"./hooks/useRSocketContext\";\r\n\r\nexport const RSocketContext = createContext({});\r\n\r\nexport const RSocketProvider = ({ children }) => {\r\n    const value = useRSocketContext(false);\r\n\r\n    return (\r\n        <RSocketContext.Provider value={value}>{children}</RSocketContext.Provider>\r\n    )\r\n}\r\n","import { useCallback, useState, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Flex, VStack, HStack } from '@chakra-ui/react';\r\nimport { CloseIcon, CheckIcon } from '@chakra-ui/icons';\r\nimport { Button, TextInput, NumberInput } from '../../../react-libs';\r\nimport { useRSocket } from '../../../components/RsocketWrapper';\r\n\r\nconst propTypes = {\r\n    handleLog: PropTypes.func,\r\n    handleLogDisable: PropTypes.func,\r\n}\r\n\r\nexport const Header = props => {\r\n    const { handleLog, handleLogDisable } = props;\r\n    const [channelValue, setChannelValue] = useState('');\r\n    const [path, setPath] = useState('');\r\n    const [parameters, setParameters] = useState('');\r\n    const [dataLength, setDataLength] = useState(2000000000);\r\n\r\n    const {\r\n        isConnected,\r\n        constructRSocketData,\r\n        connectRSocket,\r\n        disconnectRSocket,\r\n        requestResponse,\r\n        requestStream,\r\n    } = useRSocket();\r\n\r\n    const onConnect = useCallback(() => {\r\n        if (!isConnected) {\r\n            connectRSocket(() => {\r\n                handleLog && handleLog('RSocket: Connected successfully...');\r\n                handleLogDisable && handleLogDisable(false);\r\n            });\r\n        }\r\n    }, [isConnected, connectRSocket, handleLog, handleLogDisable])\r\n\r\n    const onDisconnect = useCallback(() => {\r\n        if (isConnected) {\r\n            disconnectRSocket(() => {\r\n                handleLog && handleLog('RSocket: Disconnected successfully...');\r\n                handleLogDisable && handleLogDisable(true);\r\n            });\r\n        }\r\n    }, [isConnected, disconnectRSocket, handleLog, handleLogDisable]);\r\n\r\n    const processPayload = useCallback(\r\n        data => {\r\n            try {\r\n                return JSON.stringify(data, null, '\\t');\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        },\r\n        []\r\n    )\r\n\r\n    const data = useMemo(() => {\r\n        if (path) {\r\n            try {\r\n                const params = parameters && JSON.parse(parameters);\r\n                return constructRSocketData(path, params);\r\n            } catch (e) {\r\n                return null;\r\n            }\r\n        }\r\n    }, [constructRSocketData, path, parameters])\r\n\r\n    const onRequest = useCallback(\r\n        methodType => {\r\n            if (isConnected && channelValue && data) {\r\n                let dataType = null;\r\n                switch(methodType) {\r\n                    case \"GET\":\r\n                        dataType = data.GET;\r\n                        break;\r\n                    case \"PUT\":\r\n                        dataType = data.PUT;\r\n                        break;\r\n                    case \"POST\":\r\n                        dataType = data.POST;\r\n                        break;\r\n                    case \"DELETE\":\r\n                        dataType = data.DELETE;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                const options = {\r\n                    channel: channelValue,\r\n                    data: dataType,\r\n                    onSuccess: data => {handleLog && handleLog(processPayload(data))},\r\n                    onFailure: error => handleLog && handleLog(error),\r\n                }\r\n\r\n                requestResponse(options);\r\n            }\r\n\r\n        },\r\n        [\r\n            isConnected,\r\n            channelValue,\r\n            data,\r\n            requestResponse,\r\n            handleLog,\r\n            processPayload\r\n        ]\r\n    )\r\n\r\n    const onStream = useCallback(\r\n        () => {\r\n            const options = {\r\n                data: {},\r\n                datalength: dataLength,\r\n                channel: channelValue,\r\n                onSubscribe: () => { handleLog && handleLog(`RSocket: Successfully subscribed on a stream '${channelValue}'...`) },\r\n                onSuccess: data => {handleLog && handleLog(processPayload(data))},\r\n                onFailure: error => handleLog && handleLog(error),\r\n            }\r\n\r\n            requestStream(options);\r\n        },\r\n        [\r\n            channelValue,\r\n            dataLength,\r\n            handleLog,\r\n            processPayload,\r\n            requestStream\r\n        ]\r\n    )\r\n\r\n    return (\r\n        <Flex\r\n            justify=\"flex-start\"\r\n            width=\"100%\"\r\n            backgroundColor=\"blue.700\"\r\n            borderRadius={4}\r\n            p={2}\r\n        >\r\n            <VStack\r\n                width=\"100%\"\r\n                align=\"flex-start\"\r\n            >\r\n                <HStack>\r\n                    <Button name=\"Connect\" disabled={isConnected} handleClick={onConnect} />\r\n                    <Button name=\"Disconnect\" disabled={!isConnected} handleClick={onDisconnect} />\r\n                    {\r\n                        isConnected\r\n                            ? (<CheckIcon w={4} h={4} color=\"green.600\" />)\r\n                            : (<CloseIcon w={4} h={4} color=\"red.600\" />)\r\n                    }\r\n                    <Flex color=\"white\" fontSize={14}>{'Connection Status'}</Flex>\r\n                </HStack>\r\n                <HStack width=\"100%\">\r\n                    <TextInput label=\"Channel\" disabled={!isConnected} handleChange={setChannelValue} labelProps={{ color: 'white'}} />\r\n                    <TextInput label=\"Path\" disabled={!isConnected} handleChange={setPath} labelProps={{ color: 'white'}} />\r\n                    <TextInput label=\"Parameters\" disabled={!isConnected} handleChange={setParameters} labelProps={{ color: 'white'}} />\r\n                </HStack>\r\n                <HStack>\r\n                    <Button\r\n                        name=\"GET\"\r\n                        disabled={!isConnected || !channelValue || !path}\r\n                        handleClick={() => onRequest('GET')}\r\n                    />\r\n                    <Button\r\n                        name=\"POST\"\r\n                        disabled={!isConnected || !channelValue || !path}\r\n                        handleClick={() => onRequest('POST')}\r\n\r\n                    />\r\n                    <Button\r\n                        name=\"PUT\"\r\n                        disabled={!isConnected || !channelValue || !path}\r\n                        handleClick={() => onRequest('GET')}\r\n                    />\r\n                    <Button\r\n                        name=\"DELETE\"\r\n                        disabled={!isConnected || !channelValue || !path}\r\n                        handleClick={() => onRequest('DELETE')}\r\n                    />\r\n                </HStack>\r\n                <HStack\r\n                    align=\"flex-end\"\r\n                >\r\n                    <Button name=\"Stream\" disabled={!isConnected || !channelValue} handleClick={onStream} />\r\n                    <NumberInput\r\n                        defaultValue={2000000000}\r\n                        label=\"Number of messages\"\r\n                        disabled={!isConnected || !channelValue}\r\n                        handleChange={setDataLength}\r\n                        labelProps={{ color: 'white'}}\r\n                    />\r\n                </HStack>\r\n            </VStack>\r\n        </Flex>\r\n    );\r\n}\r\n\r\nHeader.propTypes = propTypes;\r\n","import { useContext } from 'react';\r\nimport { RSocketContext } from '../RSocketContext';\r\nimport { constructRSocketData } from '../../../services/rsocket';\r\n\r\nexport const useRSocket = () => {\r\n    const {\r\n        isConnected,\r\n        onConnectRSocket,\r\n        onDisconnectRSocket,\r\n        onRequestResponse,\r\n        onRequestStream\r\n    } = useContext(RSocketContext);\r\n\r\n    return isConnected ? {\r\n        isConnected,\r\n        constructRSocketData,\r\n        connectRSocket: onConnectRSocket,\r\n        disconnectRSocket: onDisconnectRSocket,\r\n        requestResponse: onRequestResponse,\r\n        requestStream: onRequestStream,\r\n    } : {\r\n        isConnected,\r\n        constructRSocketData,\r\n        connectRSocket: onConnectRSocket,\r\n        disconnectRSocket: onDisconnectRSocket,\r\n    }\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport {Flex, VStack} from '@chakra-ui/react';\r\nimport {Button, TextArea} from '../../../react-libs'\r\n\r\nconst propTypes = {\r\n    value: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    clear: PropTypes.func,\r\n}\r\n\r\nexport const LogArea = props => {\r\n    const { value, disabled = false, clear = () => {}} = props;\r\n    return (\r\n        <VStack\r\n            backgroundColor=\"blue.700\"\r\n            borderRadius={4}\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            align=\"flex-start\"\r\n            p={2}\r\n        >\r\n            <Button name=\"CLEAR LOG\" handleClick={clear} />\r\n            <TextArea disabled={disabled} defaultValue={value} readonly styleProps={{ align: 'left', height: '100%', whiteSpace: 'pre' }} />\r\n        </VStack>\r\n    );\r\n}\r\n\r\nLogArea.propTypes = propTypes;\r\n","import { useState, useCallback } from 'react';\r\nimport { Flex, VStack } from '@chakra-ui/react';\r\nimport { Header, LogArea } from './components';\r\nimport { RSocketProvider } from '../../components/RsocketWrapper';\r\n\r\nexport const Main = () => {\r\n    const [value, setValue] = useState('//');\r\n    const [isLogDisabled, setIsLogDisabled] = useState(true);\r\n    const handleLog = useCallback(\r\n        newValue => {setValue(`${value}\\n${newValue}`)},\r\n        [value])\r\n    const clearLog = useCallback(\r\n        () => setValue('//'),\r\n        []);\r\n\r\n    return (\r\n        <RSocketProvider>\r\n            <Flex\r\n                width=\"100%\"\r\n                height=\"100Vh\"\r\n                backgroundColor=\"blue.800\"\r\n            >\r\n                <VStack\r\n                    width=\"100%\"\r\n                >\r\n                    <Header handleLogDisable={setIsLogDisabled} handleLog={handleLog}/>\r\n                    <LogArea disabled={isLogDisabled} value={value} clear={clearLog}/>\r\n                </VStack>\r\n            </Flex>\r\n        </RSocketProvider>\r\n    );\r\n}\r\n","import './App.css';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { Main } from './pages';\n// import {TestComponent} from \"./components/test-component\";\n\nfunction App() {\n  return (\n      <ChakraProvider>\n        <div className=\"App\">\n            <Main />\n            {/*<TestComponent />*/}\n        </div>\n      </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}